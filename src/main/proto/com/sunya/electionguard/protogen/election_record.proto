syntax = "proto3";

import "com/sunya/electionguard/protogen/ciphertext_ballot.proto";
import "com/sunya/electionguard/protogen/ciphertext_tally.proto";
import "com/sunya/electionguard/protogen/common.proto";
import "com/sunya/electionguard/protogen/manifest.proto";
import "com/sunya/electionguard/protogen/plaintext_ballot.proto";
import "com/sunya/electionguard/protogen/plaintext_tally.proto";

option java_package = "com.sunya.electionguard.protogen";
option java_outer_classname = "ElectionRecordProto";

// The published Election record, for some collection of ballots.
message ElectionRecord {
  Constants constants = 1;
  Manifest manifest = 2;
  ElectionContext context = 3;
  repeated EncryptionDevice device = 4;

  // Public guardian info
  repeated GuardianRecord guardian_records = 5;

  CiphertextTally ciphertext_tally = 6;
  PlaintextTally decrypted_tally = 7;

  // The guardians present for decryption
  repeated AvailableGuardian available_guardians = 8;
}

message AvailableGuardian {
  string guardian_id = 1;
  uint32 sequence = 2;
  ElementModQ lagrange_coordinate = 3;
}

// The constants for mathematical functions during the election.
message Constants {
  bytes large_prime = 1; // large prime or p
  bytes small_prime = 2; // small prime or q
  bytes cofactor = 3;    // cofactor or r
  bytes generator = 4;   // generator or g
}

// Public info for Guardian.
message GuardianRecord {
  string guardian_id = 1; // guardian id
  uint32 sequence = 2;    // aka xCoordinate in the secret polynomial
  ElementModP election_public_key = 3;
  repeated ElementModP coefficient_commitments = 4;  // Kij, j=0...quorum-1
  repeated SchnorrProof coefficient_proofs = 5;
}

// The device that does the encryption.
message EncryptionDevice {
  reserved 3; // int64 uuid
  int64 device_id = 6;
  reserved 4; // string session_id
  int32 session_id = 7;
  int32 launch_code = 5;
  string location = 2;
}

// ElectionGuard representation of a specific election.
message ElectionContext {
  uint32 number_of_guardians = 1; // The number of guardians necessary to generate the public key
  uint32 quorum = 2; // The quorum of guardians necessary to decrypt an election.  Must be <= number_of_guardians.

  // The `joint public key (K)` in the [ElectionGuard Spec]
  ElementModP joint_public_key = 3;

  // The hash of the election description
  ElementModQ description_hash = 4;

  // the `base hash code (𝑄)` in the [ElectionGuard Spec]
  ElementModQ crypto_base_hash = 5;

  // the `extended base hash code (𝑄')` in the [ElectionGuard Spec]
  ElementModQ crypto_extended_base_hash = 6;
}