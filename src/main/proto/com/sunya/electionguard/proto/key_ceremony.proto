syntax = "proto3";

import "com/sunya/electionguard/proto/common.proto";

option java_package = "com.sunya.electionguard.proto";
option java_outer_classname = "KeyCeremonyProto";

message Guardians {
  uint32 quorum = 2;
  repeated Guardian guardians = 1;
}

message Guardian {
  CoefficientSet coefficients = 1;
  AuxiliaryKeyPair auxiliary_keys = 2;
  ElectionKeyPair election_keys = 3;
  // Other guardians' auxiliary public keys shared with this guardian
  repeated AuxiliaryPublicKey other_guardian_auxiliary_keys = 4;
  // Other guardians' election public keys shared with this guardian
  repeated ElectionPublicKey other_guardian_election_keys = 5;
  // Other guardians' partial key backups shared with this guardian
  repeated ElectionPartialKeyBackup other_guardian_backups = 6;
}

message AuxiliaryKeyPair {
  // java.security.PrivateKey
  RSAPrivateKey secret_key = 1;
  // java.security.PublicKey
  RSAPublicKey public_key = 2;
}

message AuxiliaryPublicKey {
  // The unique identifier of the guardian.
  string owner_id = 1;
  // The sequence order of the auxiliary public key (usually the guardian's sequence order).
  uint32 sequence_order = 2;
  // java.security.PublicKey
  RSAPublicKey key = 3;
}

// Set of polynomial coefficients, one for each guardian
message CoefficientSets {
  repeated CoefficientSet guardianSets = 1; // size = number of guardians
}
message CoefficientSet {
  string guardian_id = 1;
  uint32 guardian_sequence = 2; // i=1,number of guardians
  repeated ElementModQ coefficients = 3; // Kij, j=0...quorum-1
}

// Set of coefficient validation pieces, one for each available guardian
message CoefficientValidationSet {
  string owner_id = 1; // guardian id
  repeated ElementModP coefficient_commitments = 2;
  repeated SchnorrProof coefficient_proofs = 3;
}

message ElectionKeyPair {
  ElGamalKeyPair key_pair = 1; // Ki = (si, g^si)
  SchnorrProof proof = 2; // proof of knowledge of possession of the associated private key
  ElectionPolynomial polynomial = 3;
}

message ElectionPolynomial {
  // The secret coefficients a_ij.
  repeated ElementModQ coefficients = 1;
  // The public keys K_ij generated from secret coefficients.
  repeated ElementModP coefficient_commitments = 2;
  // A proof of possession of the private key for each secret coefficient.
  repeated SchnorrProof coefficient_proofs = 3;
}

message ElectionPublicKey {
  string owner_id = 1; // guardian object_id
  uint32 sequence_order = 2;
  SchnorrProof proof = 3;
  ElementModP key = 4;
}

message ElectionPartialKeyBackup {
  // The Id of the guardian that generated this backup.
  string owner_id = 1;
  // The Id of the guardian to receive this backup.
  string designated_id = 2;
  // // The sequence order of the designated guardian.
  uint32 designated_sequence_order = 3;
  // The encrypted coordinate corresponding to a secret election polynomial.
  bytes encrypted_value = 4;
  // The public keys K_ij generated from the election polynomial coefficients.
  repeated ElementModP coefficient_commitments = 5;
  // The proofs of possession of the private keys for the election polynomial secret coefficients.
  repeated SchnorrProof coefficient_proofs = 6;
}

message ElGamalKeyPair {
  ElementModQ secret_key = 1;
  ElementModP public_key = 2;
}

message RSAPublicKey {
  bytes modulus = 1;
  bytes public_exponent = 2;
}

message RSAPrivateKey {
  bytes modulus = 1;
  bytes private_exponent = 2;
}