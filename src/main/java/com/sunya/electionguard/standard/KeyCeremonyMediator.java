package com.sunya.electionguard.standard;

import com.google.auto.value.AutoValue;
import com.google.common.flogger.FluentLogger;
import com.sunya.electionguard.Auxiliary;

import javax.annotation.Nullable;
import java.util.*;

import static com.sunya.electionguard.standard.KeyCeremony.*;

/** Orchestrates the Key Ceremony between the guardians. Mutable. */
class KeyCeremonyMediator {
  private static final FluentLogger logger = FluentLogger.forEnclosingClass();

  /** Pair of guardians involved in sharing. */
  @AutoValue
  abstract static class GuardianPair {
    abstract String owner_id();
    abstract String designated_id();

    public static GuardianPair create(String owner_id, String designated_id) {
      return new AutoValue_KeyCeremonyMediator_GuardianPair(owner_id, designated_id);
    }
  }

  /** Pair of guardians involved in sharing. */
  @AutoValue
  abstract static class BackupVerificationState {
    abstract boolean all_sent();
    abstract boolean all_verified();
    abstract List<GuardianPair> failed_verifications();

    public static BackupVerificationState create(boolean all_sent, boolean all_verified, List<GuardianPair> failed_verifications) {
      return new AutoValue_KeyCeremonyMediator_BackupVerificationState(all_sent, all_verified, failed_verifications);
    }
  }

  private final String id;
  private final CeremonyDetails ceremony_details;
  private final Map<String, Auxiliary.PublicKey> auxiliary_public_keys; // Map(GUARDIAN_ID, Auxiliary.PublicKey)
  private final Map<String, ElectionPublicKey> election_public_keys;  // Map(GUARDIAN_ID, ElectionPublicKey)
  private final Map<GuardianPair, ElectionPartialKeyBackup> election_partial_key_backups;
  private final Map<GuardianPair, ElectionPartialKeyVerification> election_partial_key_verifications;

  public KeyCeremonyMediator(String id, CeremonyDetails ceremony_details) {
    this.id = id;
    this.ceremony_details = ceremony_details;
    this.auxiliary_public_keys = new HashMap<>();
    this.election_public_keys = new HashMap<>();
    this.election_partial_key_backups = new HashMap<>();
    this.election_partial_key_verifications = new HashMap<>();
  }

  /////// ROUND 1: Announce guardians with public keys

  /** Announce the guardian as present and participating the Key Ceremony. */
  public void announce(PublicKeySet public_key_set) {
    this.receive_election_public_key(public_key_set.election());
    this.receive_auxiliary_public_key(public_key_set.auxiliary());
   }

  /**
   * Check the attendance of all the guardians expected.
   * @return True if all guardians in attendance
   */
  public boolean all_guardians_announced() {
    return this.all_auxiliary_public_keys_available() && this.all_election_public_keys_available();
  }

  /** When all guardians have announced, share their public keys indicating their announcement. */
  public Optional<List<PublicKeySet>> share_announced(@Nullable String requesting_guardian_id) {
    if (!this.all_guardians_announced()) {
      return Optional.empty();
    }
    List<PublicKeySet> result = new ArrayList<>();
    for (String guardian_id : this.get_announced_guardians()) {
      if (!guardian_id.equals(requesting_guardian_id)) {
          result.add(PublicKeySet.create(
                  this.election_public_keys.get(guardian_id),
                  this.auxiliary_public_keys.get(guardian_id)));
        }
    }
    return Optional.of(result);
  }

  // ROUND 2: Share Election Partial Key Backups for compensating

  /** Receive all the election partial key backups generated by a guardian. */
  public void receive_backups(List<ElectionPartialKeyBackup> backups) {
    if (!this.all_guardians_announced()) {
      return;
    }
    for (ElectionPartialKeyBackup backup : backups) {
      this.receive_election_partial_key_backup(backup);
    }
  }

   /** return true if all guardians have sent backups. */
   boolean all_backups_available() {
     return this.all_guardians_announced() && this.all_election_partial_key_backups_available();
   }

   /** Share all backups designated for a specific guardian. */
   public Optional<List<ElectionPartialKeyBackup>> share_backups(@Nullable String requesting_guardian_id) {
     if (!this.all_guardians_announced() || !this.all_backups_available()) {
       return Optional.empty();
     }
     if (requesting_guardian_id == null) {
       return Optional.of(new ArrayList<>(this.election_partial_key_backups.values()));
     } else {
       return Optional.of(this.share_election_partial_key_backups_to_guardian(requesting_guardian_id));
     }
   }

   // ROUND 3: Share verifications of backups

   /**  Receive all the election partial key verifications performed by a guardian. */
   public void receive_backup_verifications(List<ElectionPartialKeyVerification> verifications) {
     if (!this.all_backups_available()) {
       return;
     }
     for (ElectionPartialKeyVerification verification : verifications) {
       this.receive_election_partial_key_verification(verification);
     }
   }

  BackupVerificationState get_verification_state() {
    if (! this.all_backups_available() || !this.all_election_partial_key_verifications_received()) {
      return BackupVerificationState.create(false, false, new ArrayList<>());
    }
    return this.check_verification_of_election_partial_key_backups();
  }

  public boolean all_backups_verified() {
    return this.get_verification_state().all_verified();
  }

  // ROUND 4 (Optional): If a verification fails, guardian must issue challenge

  /** Mediator receives challenge and will act to mediate and verify. */
  ElectionPartialKeyVerification verify_challenge(ElectionPartialKeyChallenge challenge) {
    ElectionPartialKeyVerification verification = verify_election_partial_key_challenge(this.id, challenge);
    if (verification.verified()) {
      this.receive_election_partial_key_verification(verification);
    }
    return verification;
  }

    // FINAL: Publish joint public election key
  /** Publish joint election key from the public keys of all guardians. */
  public Optional<ElectionJointKey> publish_joint_key() {
    if (!this.all_backups_verified()) {
      return Optional.empty();
    }
    return Optional.of(KeyCeremony.combine_election_public_keys( this.election_public_keys.values()));
  }

  /**
   * Receive auxiliary public key from guardian.
   * @param public_key: Auxiliary public key
   */
  void receive_auxiliary_public_key(Auxiliary.PublicKey public_key) {
    this.auxiliary_public_keys.put(public_key.owner_id, public_key);
  }

  /**
   * True if all auxiliary public key for all guardians available.
   * @return All auxiliary public backups for all guardians available
   */
  boolean all_auxiliary_public_keys_available() {
    return this.auxiliary_public_keys.size() == this.ceremony_details.number_of_guardians();
  }

  /**
   * Share all currently stored auxiliary public keys for all guardians.
   * @return list of auxiliary public keys
   *
  Iterable<Auxiliary.PublicKey> share_auxiliary_public_keys() {
    return this.auxiliary_public_keys.values();
  } */

  /**
   * Receive election public key from guardian.
   * @param public_key election public key
   */
  void receive_election_public_key(ElectionPublicKey public_key) {
    this.election_public_keys.put(public_key.owner_id(), public_key);
  }

  /** True if all election public keys for all guardians available. */
  boolean all_election_public_keys_available() {
    return this.election_public_keys.size() == this.ceremony_details.number_of_guardians();
  }

  /**
   * Share all currently stored election public keys for all guardians.
   * @return list of election public keys
   */
  Iterable<String> get_announced_guardians() {
    return this.election_public_keys.keySet();
  }

  //// Election Partial Key Backups

  /**
   * Receive election partial key backup from guardian.
   * @param backup: Manifest partial key backup
   */
  void receive_election_partial_key_backup(ElectionPartialKeyBackup backup) {
    if (backup.owner_id().equals(backup.designated_id())) {
      return;
    }
    this.election_partial_key_backups.put(GuardianPair.create(backup.owner_id(), backup.designated_id()), backup);
  }

  /** True if all election partial key backups for all guardians available. */
  public boolean all_election_partial_key_backups_available() {
    int required_backups_per_guardian = this.ceremony_details.number_of_guardians() - 1;
    return this.election_partial_key_backups.size() ==
            required_backups_per_guardian * this.ceremony_details.number_of_guardians();
  }

  /**
   * Share all election partial key backups for designated guardian.
   * @param guardian_id Recipients guardian id
   * @return List of guardians designated backups
   */
  List<ElectionPartialKeyBackup> share_election_partial_key_backups_to_guardian(String guardian_id) {
    List<ElectionPartialKeyBackup> backups = new ArrayList<>();
    for (String current_guardian_id : this.get_announced_guardians()) {
      if (!guardian_id.equals(current_guardian_id)) {
        ElectionPartialKeyBackup backup = this.election_partial_key_backups.get(
                GuardianPair.create(current_guardian_id, guardian_id));
        if (backup != null) {
          backups.add(backup);
        }
      }
    }
    return backups;
  }

  /** Receive election partial key verification from guardian. */
  void receive_election_partial_key_verification(ElectionPartialKeyVerification verification) {
    if (!verification.owner_id().equals(verification.designated_id())) {
      this.election_partial_key_verifications.put(
              GuardianPair.create(verification.owner_id(), verification.designated_id()),
              verification);
    }
  }

  /** True if all election partial key verifications received. */
  public boolean all_election_partial_key_verifications_received() {
    int required_verifications_per_guardian = this.ceremony_details.number_of_guardians() - 1;
    return this.election_partial_key_verifications.size() ==
            required_verifications_per_guardian * this.ceremony_details.number_of_guardians();
  }

  /** True if all election partial key backups verified . */
  public boolean all_election_partial_key_backups_verified() {
    if (!this.all_election_partial_key_verifications_received()) {
      return false;
    }
    for (ElectionPartialKeyVerification verification : this.election_partial_key_verifications.values()) {
      if (!verification.verified()) {
        return false;
      }
    }
    return true;
  }

  /** return: All election partial key backups verified. */
  BackupVerificationState check_verification_of_election_partial_key_backups() {
    if (!this.all_election_partial_key_verifications_received()) {
      return BackupVerificationState.create(false, false, new ArrayList<>());
    }
    ArrayList<GuardianPair> failed_verifications = new ArrayList<>();
    for (ElectionPartialKeyVerification verification : this.election_partial_key_verifications.values()) {
      if (!verification.verified()) {
        failed_verifications.add(GuardianPair.create(verification.owner_id(), verification.designated_id()));
      }
    }
    return BackupVerificationState.create(true, failed_verifications.isEmpty(), failed_verifications);
  }

}
