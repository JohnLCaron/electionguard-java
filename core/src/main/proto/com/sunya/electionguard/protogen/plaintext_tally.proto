syntax = "proto3";

import "com/sunya/electionguard/protogen/common.proto";

option java_package = "com.sunya.electionguard.protogen";
option java_outer_classname = "PlaintextTallyProto";

// Decrypted Tally of some collection of ballots.
message PlaintextTally {
  string object_id = 1;
  // Map(CONTEST_ID, PlaintextTallyContest)
  map<string, PlaintextTallyContest> contests = 2;
}

message PlaintextTallyContestMap {
  map<string, PlaintextTallyContest> contests = 1;
}

message PlaintextTallyContest {
  string object_id = 1;
  int32 sequence_order = 3;
  map<string, PlaintextTallySelection> selections = 2;
}

message PlaintextTallySelection {
  string object_id = 1;
  int32 sequence_order = 6;
  uint32 tally = 2;
  // g^tally or M in the spec.
  ElementModP value = 3;
  ElGamalCiphertext message = 4;
  repeated CiphertextDecryptionSelection shares = 5;
}

message CiphertextDecryptionSelection {
  string object_id = 1;
  int32 sequence_order = 7;

  // The Available Guardian that this share belongs to
  string guardian_id = 2;

  // The SelectionDescription hash.
  ElementModQ description_hash = 3;

  // The Share of the decryption of a selection. `M_i` in the spec.
  ElementModP share = 4;

  // The Proof that the share was decrypted correctly, if the guardian was available for decryption.
  ChaumPedersenProof proof = 5;

  // Map[GUARDIAN_ID, CiphertextCompensatedDecryptionSelection]
  map<string, CiphertextCompensatedDecryptionSelection> recovered_parts = 6;
}

message CiphertextCompensatedDecryptionSelection {
  string object_id = 1;

  // The Available Guardian that this share belongs to.
  string guardian_id = 2;

  // The Missing Guardian for whom this share is calculated on behalf of.
  string missing_guardian_id = 3;

  // The Share of the decryption of a selection. M_il in the spec.
  ElementModP share = 5;

  // he Recovery Public Key for the missing_guardian that corresponds to the available guardian's share of the secret.
  ElementModP recovery_key = 6;

  // The Proof that the share was decrypted correctly.
  ChaumPedersenProof proof = 7;
}