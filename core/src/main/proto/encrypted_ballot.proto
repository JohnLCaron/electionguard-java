syntax = "proto3";

import "common.proto";

option java_package = "electionguard.protogen";
option java_outer_classname = "EncryptedBallotProto";

// An encrypted ballot that has been cast or spoiled
message EncryptedBallot {
  enum BallotState {
    UNKNOWN = 0;
    CAST = 1;
    SPOILED = 2;
  }

  string ballot_id = 1; // a unique Ballot ID created by the external system
  string ballot_style_id = 2; // The ballot_style_id of the BallotStyle in the Election Manifest
  UInt256 manifest_hash = 3; // Matches Manifest.crypto_hash
  UInt256 code_seed = 4; // Previous ballot tracking hash or seed hash, aka code_seed
  UInt256 code = 5; // Unique ballot tracking hash for this ballot, aka code
  repeated EncryptedBallotContest contests = 6;
  int64 timestamp = 7; // Timestamp at which the ballot encryption is generated, in seconds since the epoch UTC.
  UInt256 crypto_hash = 8;
  BallotState state = 9;
}

// Encrypted selections for a specific contest.
message EncryptedBallotContest {
  string contest_id = 1; // matches the ContestDescription.contest_id
  uint32 sequence_order = 2; // matches the ContestDescription.sequence_order
  UInt256 contest_hash = 3; // matches ContestDescription.crypto_hash
  repeated EncryptedBallotSelection selections = 4;
  reserved 5;
  UInt256 crypto_hash = 6;
  ConstantChaumPedersenProof proof = 7;  // The proof the sum of the selections does not exceed the maximum
}

// Encryption of a specific selection.
message EncryptedBallotSelection {
  string selection_id = 1; // matches the SelectionDescription.selection_id
  uint32 sequence_order = 2; // matches the SelectionDescription.sequence_order
  UInt256 selection_hash = 3; // matches SelectionDescription.crypto_hash
  ElGamalCiphertext ciphertext = 4; // The encrypted representation of the vote field
  UInt256 crypto_hash = 5;
  bool is_placeholder_selection = 6;
  DisjunctiveChaumPedersenProof proof = 7; // The proof the selection is an encryption of 0 or 1
  HashedElGamalCiphertext extended_data = 8; // encrypted representation of the extended_data field.
}

message ConstantChaumPedersenProof {
  reserved 1;
  reserved 2;
  reserved 3;
  reserved 4;
  uint32 constant = 5;
  GenericChaumPedersenProof proof = 6;
}

message DisjunctiveChaumPedersenProof {
  reserved 1;
  reserved 2;
  reserved 3;
  reserved 4;
  reserved 5;
  reserved 6;
  reserved 7;
  reserved 8;
  ElementModQ challenge = 9;
  GenericChaumPedersenProof proof0 = 10;
  GenericChaumPedersenProof proof1 = 11;
}