syntax = "proto3";

import "ciphertext_tally.proto";
import "common.proto";
import "manifest.proto";
import "plaintext_tally.proto";

option java_package = "electionguard.protogen";
option java_outer_classname = "ElectionRecordProto2";

// Election Configuration, before the KeyCeremony
message ElectionConfig {
  string proto_version = 1; // protobuf serialization version
  ElectionConstants constants = 2;
  Manifest manifest = 3;
  uint32 number_of_guardians = 4; // The number of guardians necessary to generate the public key
  uint32 quorum = 5; // The quorum of guardians necessary to decrypt an election.  Must be <= number_of_guardians.
  map<string, string> metadata = 6;
}

// The constants for mathematical functions during the election.
message ElectionConstants {
  string name = 5;
  bytes large_prime = 1; // large prime or p
  bytes small_prime = 2; // small prime or q
  bytes cofactor = 3;    // cofactor or r
  bytes generator = 4;   // generator or g
}

// Election Initialization, after the KeyCeremony
message ElectionInitialized {
  ElectionConfig config = 1;

  // The `joint public key (K)` in the [ElectionGuard Spec]
  ElementModP joint_public_key = 2;
  // Matches Manifest.crypto_hash
  UInt256 manifest_hash = 3;
  // the `extended base hash code (ùëÑ')` in the [ElectionGuard Spec]
  UInt256 crypto_extended_base_hash = 4;
  // the public information about the Guardians / Trustees
  repeated Guardian guardians = 5;
  map<string, string> metadata = 6;
}

// Public info for Guardians
message Guardian {
  string guardian_id = 1;     // guardian id
  uint32 x_coordinate = 2;    // x coordinate in the secret polynomial. must be > 0
  repeated ElementModP  coefficient_commitments = 3;  // Kij, j=0...number_of_guardians-1
  repeated SchnorrProof coefficient_proofs = 4;  // size = number_of_guardians
}

message TallyResult {
  ElectionInitialized election_init = 1;
  CiphertextTally ciphertext_tally = 2;
  repeated string ballot_ids = 3;
  repeated string tally_ids = 4;
}

message DecryptionResult {
  TallyResult tally_result = 1;
  PlaintextTally decrypted_tally = 2;
  repeated AvailableGuardian decrypting_guardians = 3;
  map<string, string> metadata = 4;
}

message AvailableGuardian {
  string guardian_id = 1;
  uint32 x_coordinate = 2; // x coordinate in the secret polynomial. must be > 0
  ElementModQ lagrange_coefficient = 3;
}