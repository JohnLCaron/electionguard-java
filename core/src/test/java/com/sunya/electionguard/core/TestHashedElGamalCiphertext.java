package com.sunya.electionguard.core;

import at.favre.lib.bytes.Bytes;
import com.sunya.electionguard.ElGamal;
import com.sunya.electionguard.Group;
import com.sunya.electionguard.TestUtils;
import net.jqwik.api.Example;

import java.math.BigInteger;
import java.nio.charset.StandardCharsets;

import static com.google.common.truth.Truth.assertThat;

public class TestHashedElGamalCiphertext {

  @Example
  public void testHashedElGamal() {
    ElGamal.KeyPair keypair = TestUtils.elgamal_keypairs();
    HashedElGamalCiphertext subject = HashedElGamalCiphertext.create(
            Bytes.from("message"),
            keypair.public_key(),
            TestUtils.elements_mod_q());

    Bytes result = subject.decrypt(keypair.secret_key());
    assertThat((Object) result).isNotNull();

    System.out.printf("result=%s%n", result);
    System.out.printf("result=%s%n", new String(result.array(), StandardCharsets.UTF_8));
  }

  @Example
  public void testHashedElGamalCompare() {
    // val secretKey = 46267890813155473402165901953534450183047527506697204398440518038405931865866
    // val publicKey = 796035026350906967557564543683812973520169942667153374800108906458646245710080930495702270875334191417027248235087345983083235721389666195591137891733851944788997109486911847789620884543500513946142931929343975587633844814507935641982124214889737715533639691617687314419216799992449552805009762694653244638897765263249437390692300969978783853899985310255587200806481456754024520487368453016636038847427957122532139215808248522299269703889493927777273124652397959171324310626978305583642783198998340683123734700883208732141537594244294433161639728450875053012037711605014708495467450792434576532609496223843263067290649211668152629073082537695508673976150762813565573170637199104571120402802994092258695464825859026401293506282299304243297867654469366014887473758136172224206633886830194958125419292234671197797419302740013551682475860563883181882727848710680366765900192364570542240058561746581441030739562505521182835144550914836144923179463512535966059191210980777551913235917201184576841253230974229264229291511442354036122789388929274292764365504232304167828246684030289258214384739862295507193896312393274740135188122230486131520674455764543272983903202669489125884332592865964261679865966039308543188841089735038172125513501064)
    // val nonce = 38349921341119137826571258502302294106321966885668628282848299826820971248927

    BigInteger ski = new BigInteger(
            "46267890813155473402165901953534450183047527506697204398440518038405931865866"
    );
    Group.ElementModQ secretKey = Group.int_to_q(ski).orElseThrow();

    BigInteger pki = new BigInteger(
            "796035026350906967557564543683812973520169942667153374800108906458646245710080930495702270875334191417027248235087345983083235721389666195591137891733851944788997109486911847789620884543500513946142931929343975587633844814507935641982124214889737715533639691617687314419216799992449552805009762694653244638897765263249437390692300969978783853899985310255587200806481456754024520487368453016636038847427957122532139215808248522299269703889493927777273124652397959171324310626978305583642783198998340683123734700883208732141537594244294433161639728450875053012037711605014708495467450792434576532609496223843263067290649211668152629073082537695508673976150762813565573170637199104571120402802994092258695464825859026401293506282299304243297867654469366014887473758136172224206633886830194958125419292234671197797419302740013551682475860563883181882727848710680366765900192364570542240058561746581441030739562505521182835144550914836144923179463512535966059191210980777551913235917201184576841253230974229264229291511442354036122789388929274292764365504232304167828246684030289258214384739862295507193896312393274740135188122230486131520674455764543272983903202669489125884332592865964261679865966039308543188841089735038172125513501064"
    );
    Group.ElementModP publicKey = Group.int_to_p(pki).orElseThrow();

    BigInteger noncei = new BigInteger(
            "38349921341119137826571258502302294106321966885668628282848299826820971248927"
    );
    Group.ElementModQ nonce = Group.int_to_q(noncei).orElseThrow();

    System.out.printf("secretKey='%s'%n", secretKey.base16());
    System.out.printf("publicKey='%s'%n", publicKey.base16());

    HashedElGamalCiphertext subject = HashedElGamalCiphertext.create(
            Bytes.from("message"),
            publicKey,
            nonce);

    System.out.printf("HashedElGamal.pad='%s'%n", subject.c0().base16());
    System.out.printf("HashedElGamal.data='%s'%n", subject.c1());

    Bytes result = subject.decrypt(secretKey);
    assertThat((Object) result).isNotNull();
    String resultS = new String(result.array(), StandardCharsets.UTF_8);

    System.out.printf("result=%s%n", resultS);

    assertThat(resultS).isEqualTo("message");
  }


}
