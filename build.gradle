// The "buildscript" configuration section is for gradle itself
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.14'
    }
}

// What is "plugin"? They are just java classes, which implement Plugin interface.
plugins {
    id 'java'
    id "com.google.protobuf" version "0.8.14"
    id 'maven-publish'
    id 'signing'
}

group 'com.sunya.electionguard'
version '0.9.4-SNAPSHOT'

repositories {
    mavenLocal()
    jcenter() // jcommander not on maven central
    mavenCentral()
}

ext.junitPlatformVersion = '1.7.0'
ext.junitJupiterVersion = '5.7.0'
ext.jqwikVersion = '1.3.10'
ext.grpcVersion = '1.36.1'

compileTestJava {
    // To enable argument names in reporting and debugging
    options.compilerArgs += '-parameters'
}

dependencies {
    implementation 'com.beust:jcommander:1.80'
    implementation 'com.google.code.findbugs:jsr305:3.0.2' // LOOK All we want is Nullable
    implementation 'com.google.guava:guava:30.1-jre'
    implementation 'com.google.protobuf:protobuf-java:3.14.0'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation "com.google.auto.value:auto-value-annotations:1.7.4"
    implementation 'com.google.flogger:flogger:0.5.1'
    runtimeOnly 'com.google.flogger:flogger-system-backend:0.5.1'

    annotationProcessor "com.google.auto.value:auto-value:1.7.4"

    // grpc
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-services:${grpcVersion}"
    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"
    compile("javax.annotation:javax.annotation-api:1.3.2")

    // temporary until i get uibase hosted on a maven repo
    // implementation 'edu.ucar:uibase:6.1.0-SNAPSHOT'
    implementation files('libs/uibase-6.1.0.jar')
    implementation 'org.jdom:jdom2:2.0.6'
    implementation 'org.slf4j:slf4j-api:1.7.28'
    implementation 'com.jgoodies:jgoodies-forms:1.6.0'
    runtime "org.slf4j:slf4j-jdk14:1.7.28" // slf4j-jdk14.jar.

    testImplementation 'com.google.truth:truth:1.1'
    testImplementation 'com.google.truth.extensions:truth-java8-extension:1.1'
    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
    testImplementation "net.jqwik:jqwik:${jqwikVersion}" // aggregate jqwik dependency
    testImplementation "org.junit.jupiter:junit-jupiter:5.7.0"
    testImplementation 'org.mockito:mockito-core:3.9.0'
}

protobuf {
    protoc {
        // The artifact spec for the Protobuf Compiler
        artifact = 'com.google.protobuf:protoc:3.14.0'
    }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java::1.36.0" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

// Add generated sources to the main sourceSet, which keeps intellij happy.
sourceSets.main.java.srcDirs += ['build/generated/source/proto/main/java']
sourceSets.main.java.srcDirs += ['build/generated/source/proto/main/grpc']

java {
    withJavadocJar()
    withSourcesJar()
}

test {
    useJUnitPlatform {
        includeEngines 'jqwik'

        // Or include several Junit engines if you use them
        // includeEngines 'jqwik', 'junit-jupiter', 'junit-vintage'

        // includeTags 'fast', 'medium'
        // excludeTags 'slow'
    }

    include '**/*Properties.class'
    include '**/*Test.class'
    include '**/*Tests.class'
    include '**/Test*.class'
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.sunya.electionguard.verifier.VerifyElectionRecord'
    }
    archiveClassifier = "all"
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

task myJavadocs(type: Javadoc) {
    source = sourceSets.main.allJava
    exclude 'com/sunya/electionguard/viz/*.java'

    classpath = sourceSets.main.runtimeClasspath
    title ='test'
    options.showFromPublic()
    options.noDeprecated()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'com.sunya'
            artifactId = 'electionguard'

            from components.java
            pom {
                name = 'ElectionGuard Java library'
                description = 'A complete port of https://github.com/microsoft/electionguard-python/'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'jcaron1129'
                        name = 'John L Caron'
                        email = 'jcaron1129@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/JohnLCaron/electionguard-java.git'
                    url = 'https://github.com/JohnLCaron/electionguard-java'
                }
            }
        }
    }

    repositories {
        maven {
            name = 'localRepo'
            url = "file://${buildDir}/repo"
        }
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/JohnLCaron/electionguard-java"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
        /* maven {
            name = "OSSRH"
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = nexusUsername
                password = nexusPassword
            }
        } */
    }
}

signing {
    sign publishing.publications.mavenJava
}